Basic types
https://www.typescriptlang.org/docs/handbook/basic-types.html


Boolean
: boolean


Number
: number


String
: string


Array
: number[]
: Array<number>


Tuple
// allow you to express an array with a fixed number of elements whose types are known (types need not be the same)
: [string, number]


Enum
// a way of giving more friendly names to sets of numeric values.

// by default starting at 0
enum Color { Red, Green = 1, Blue = 2 }
let c: Color = Color.Green;

// you can also go from a numeric value to the name of that value in the enum
let colorName: string = Color[2];


Any
// the type of variables that we do not know when we are writing an application

let notSure: any = 4;
notSure = "maybe a string instead";
notSure = false; // okay, definitely a boolean

let list: any[] = [1, true, "free"];
list[1] = 100;


Void
..?

// void is a little like the opposite of any: the absence of having any type at all.
// You may commonly see this as the return type of functions that do not return a value:


Null & Undefined
// By default null and undefined are subtypes of all other types.
// That means you can assign null and undefined to something like number.

// However, when using the --strictNullChecks flag, null and undefined are only assignable
// to any and their respective types (the one exception being that undefined is also assignable to void).
// This helps avoid many common errors. In cases where you want to pass in either a string or null or undefined,
// you can use the union type string | null | undefined.


Never
.. ?

// The never type represents the type of values that never occur.
// For instance, never is the return type for a function expression or an arrow function expression
// that always throws an exception or one that never returns;
// Variables also acquire the type never when narrowed by any type guards that can never be true.

// The never type is a subtype of, and assignable to, every type;
// however, no type is a subtype of, or assignable to, never (except never itself).
// Even any isn’t assignable to never.


Object
// object is a type that represents the non-primitive type,
// i.e. anything that is not number, string, boolean, symbol, null, or undefined.

declare function create(o: object | null): void;

create({ prop: 0 }); // OK
create(null); // OK

create(42); // Error
// Argument of type '42' is not assignable to parameter of type 'object | null'.
create("string"); // Error
// Argument of type '"string"' is not assignable to parameter of type 'object | null'.
create(false); // Error
// Argument of type 'false' is not assignable to parameter of type 'object | null'.
create(undefined); // Error
// Argument of type 'undefined' is not assignable to parameter of type 'object | null'.


Type assertions

// Sometimes you’ll end up in a situation where you’ll know more about a value than TypeScript does. // Usually this will happen when you know the type of some entity could be more specific than its current type.

// Type assertions are a way to tell the compiler “trust me, I know what I’m doing.”
// A type assertion is like a type cast in other languages, but performs no special checking
// or restructuring of data.
// It has no runtime impact, and is used purely by the compiler.
// TypeScript assumes that you, the programmer, have performed any special checks that you need.



